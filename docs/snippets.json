{
  "ThirdwebSDK": {
    "name": "ThirdwebSDK",
    "summary": "The main entry point for the thirdweb SDK\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "fromPrivateKey",
        "summary": "Get an instance of the thirdweb SDK based on a private key.\n\n",
        "remarks": "\n\nThis should only be used for backend services or scripts, with the private key stored in a secure way. **NEVER** expose your private key to the public in any way.\n\n",
        "examples": {
          "javascript": "const sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst sdk = ThirdwebSDK.fromPrivateKey(\"SecretPrivateKey\", \"mainnet\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromprivatekey",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromprivatekey"
        }
      },
      {
        "name": "fromSigner",
        "summary": "Get an instance of the thirdweb SDK based on an existing ethers signer\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// get a signer from somewhere (createRandom is being used purely for example purposes)\nconst signer = ethers.Wallet.createRandom();\n\n// get an instance of the SDK with the signer already setup\nconst sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// get a signer from somewhere (createRandom is being used purely for example purposes)\nconst signer = ethers.Wallet.createRandom();\n\n// get an instance of the SDK with the signer already setup\nconst sdk = ThirdwebSDK.fromSigner(signer, \"mainnet\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromsigner",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.fromsigner"
        }
      },
      {
        "name": "getBalance",
        "summary": "Get the native balance of a given address (wallet or contract)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const balance = await sdk.getBalance(\"0x...\");\nconsole.log(balance.displayValue);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst balance = await sdk.getBalance(\"0x...\");\nconsole.log(balance.displayValue);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getbalance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getbalance"
        }
      },
      {
        "name": "getContract",
        "summary": "Get an instance of a Custom ThirdwebContract\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const contract = sdk.getContract(\"{{contract_address}}\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contract = sdk.getContract(\"{{contract_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontract",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontract"
        }
      },
      {
        "name": "getContractFromAbi",
        "summary": "Get an instance of a Custom contract from a json ABI\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Import your ABI from a JSON file\nimport myABI from \"./path/to/myABI.json\";\n\nconst contract = sdk.getContractFromAbi(\n  \"{{contract_address}}\",\n  // Pass in the \"abi\" field from the JSON file\n  myABI.abi\n);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// Import your ABI from a JSON file\nimport myABI from \"./path/to/myABI.json\";\n\nconst contract = sdk.getContractFromAbi(\n  \"{{contract_address}}\",\n  // Pass in the \"abi\" field from the JSON file\n  myABI.abi\n);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractfromabi",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractfromabi"
        }
      },
      {
        "name": "getContractList",
        "summary": "Return all the contracts deployed by the specified address\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const contracts = sdk.getContractList(\"{{wallet_address}}\");",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contracts = sdk.getContractList(\"{{wallet_address}}\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractlist",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.thirdwebsdk.getcontractlist"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ThirdwebSDK"
    }
  },
  "NFTCollection": {
    "name": "NFTCollection",
    "summary": "",
    "examples": {
      "react": "import { useNFTCollection } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const nftCollection = useNFTCollection(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the nftCollection contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_nft_collection(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetNFTCollection(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/nft-collection",
      "go": "https://docs.thirdweb.com/go/nft_collection"
    }
  },
  "Edition": {
    "name": "Edition",
    "summary": "",
    "examples": {
      "react": "import { useEdition } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const edition = useEdition(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the edition contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_edition(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetEditionDrop(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/edition",
      "go": "https://docs.thirdweb.com/go/edition_drop"
    }
  },
  "TokenDrop": {
    "name": "TokenDrop",
    "summary": "",
    "examples": {
      "react": "import { useTokenDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const tokenDrop = useTokenDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the token drop contract in the rest of the component\n}"
    },
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "Token": {
    "name": "Token",
    "summary": "",
    "examples": {
      "react": "import { useToken } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const token = useToken(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the token contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_token(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetToken(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/token",
      "go": "https://docs.thirdweb.com/go/token"
    }
  },
  "NFTDrop": {
    "name": "NFTDrop",
    "summary": "",
    "examples": {
      "react": "import { useNFTDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const nftDrop = useNFTDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the nft drop contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_nft_drop(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetNFTDrop(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/nft-drop",
      "go": "https://docs.thirdweb.com/go/nft_drop"
    }
  },
  "EditionDrop": {
    "name": "EditionDrop",
    "summary": "",
    "examples": {
      "react": "import { useEditionDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const editionDrop = useEditionDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the edition drop contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_edition_drop(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetEditionDrop(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/edition-drop",
      "go": "https://docs.thirdweb.com/go/edition_drop"
    }
  },
  "Marketplace": {
    "name": "Marketplace",
    "summary": "",
    "examples": {
      "react": "import { useMarketplace } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const marketplace = useMarketplace(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the marketplace contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_marketplace(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetMarketplace(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/marketplace",
      "go": "https://docs.thirdweb.com/go/marketplace"
    }
  },
  "MarketplaceDirect": {
    "name": "MarketplaceDirect",
    "summary": "Handles direct listings\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "acceptOffer",
        "summary": "Accept an offer on a direct listing\n\n",
        "remarks": "\n\nAccept an offer on a direct listing\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst offeror = \"0x...\";\n\nawait contract.direct.acceptOffer(listingId, offeror);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst offeror = \"0x...\";\n\nawait contract.direct.acceptOffer(listingId, offeror);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.acceptoffer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.acceptoffer"
        }
      },
      {
        "name": "buyoutListing",
        "summary": "Buy a Listing\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.direct.buyoutListing(listingId, quantityDesired);",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const {\n    mutate: buyNow,\n    isLoading,\n    error,\n  } = useBuyNow(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to buyout listing\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n    >\n      Buy listing!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.buyoutlisting",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usebuynow"
        }
      },
      {
        "name": "cancelListing",
        "summary": "Cancel Direct Listing\n\n",
        "remarks": "\n\nCancel a direct listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.direct.cancelListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.direct.cancelListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.cancellisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.cancellisting"
        }
      },
      {
        "name": "createListing",
        "summary": "Create Direct Listing\n\n",
        "remarks": "\n\nCreate a new listing on the marketplace where people can buy an asset directly.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing",
          "python": "",
          "go": "",
          "react": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.createlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.createlisting"
        }
      },
      {
        "name": "makeOffer",
        "summary": "Make an offer for a Direct Listing\n\n",
        "remarks": "\n\nMake an offer on a direct listing\n\n",
        "examples": {
          "javascript": "import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n\n// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 1;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n// The address of the currency you are making the offer in (must be ERC-20)\nconst currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n\nawait contract.direct.makeOffer(\n  listingId,\n  quantity,\n  currencyContractAddress,\n  pricePerToken\n);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nimport { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n\n// The listing ID of the asset you want to offer on\nconst listingId = 0;\n// The price you are willing to offer per token\nconst pricePerToken = 1;\n// The quantity of tokens you want to receive for this offer\nconst quantity = 1;\n// The address of the currency you are making the offer in (must be ERC-20)\nconst currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n\nawait contract.direct.makeOffer(\n  listingId,\n  quantity,\n  currencyContractAddress,\n  pricePerToken\n);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.makeoffer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplacedirect.makeoffer"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceDirect"
    }
  },
  "MarketplaceAuction": {
    "name": "MarketplaceAuction",
    "summary": "Handles auction listings\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "buyoutListing",
        "summary": "Buyout Auction\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.auction.buyoutListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.auction.buyoutListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.buyoutlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.buyoutlisting"
        }
      },
      {
        "name": "cancelListing",
        "summary": "Cancel Auction Listing\n\n",
        "remarks": "\n\nCancel an auction listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.auction.cancelListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\";\n\nawait contract.auction.cancelListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.cancellisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.cancellisting"
        }
      },
      {
        "name": "closeListing",
        "summary": "Close the Auction\n\n",
        "remarks": "\n\nCloses the Auction and executes the sale.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.closeListing(listingId);",
          "python": "",
          "go": "",
          "react": "// The listing ID of the auction listing you want to close\nconst listingId = \"0\";\nawait contract.auction.closeListing(listingId);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.closelisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.closelisting"
        }
      },
      {
        "name": "createListing",
        "summary": "Create Auction\n\n",
        "remarks": "\n\nCreate a new auction where people can bid on an asset.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing",
          "python": "",
          "go": "",
          "react": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n // when should the listing open up for offers\n  startTimestamp: new Date(),\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst id = tx.id; // the id of the newly created listing"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.createlisting",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.createlisting"
        }
      },
      {
        "name": "getWinner",
        "summary": "Get Auction Winner\n\n",
        "remarks": "\n\nGet the winner of the auction after an auction ends.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));",
          "python": "",
          "go": "",
          "react": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.getwinner",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.getwinner"
        }
      },
      {
        "name": "getWinningBid",
        "summary": "Get Highest Bid\n\n",
        "remarks": "\n\nGet the current highest bid of an active auction.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract.auction.\n  .getWinningBid(listingId)\n  .then((offer) => console.log(offer))\n  .catch((err) => console.error(err));",
          "python": "",
          "go": "",
          "react": "const { data: winningBid, isLoading, error } = useWinningBid(<YourMarketplaceContractInstance>, <listingId>);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.getwinningbid",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usewinningbid"
        }
      },
      {
        "name": "makeBid",
        "summary": "Bid On Auction\n\n",
        "remarks": "\n\nMake a bid on an auction listing\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 1;\n\nawait contract.auction.makeBid(listingId, pricePerToken);",
          "python": "",
          "go": "",
          "react": "const Component = () => {\n  const {\n    mutate: makeBid,\n    isLoading,\n    error,\n  } = useMakeBid(\">>YourMarketplaceContractInstance<<\");\n\n  if (error) {\n    console.error(\"failed to make a bid\", error);\n  }\n\n  return (\n    <button\n      disabled={isLoading}\n      onClick={() => makeBid({ listingId: 1, bid: 2 })}\n    >\n      Bid!\n    </button>\n  );\n};"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.marketplaceauction.makebid",
          "python": "",
          "go": "",
          "react": "https://portal.thirdweb.com/react/react.usemakebid"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.MarketplaceAuction"
    }
  },
  "Split": {
    "name": "Split",
    "summary": "",
    "examples": {
      "react": "import { useSplit } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const split = useSplit(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the split contract in the rest of the component\n}"
    },
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "Pack": {
    "name": "Pack",
    "summary": "",
    "examples": {
      "react": "import { usePack } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const pack = usePack(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the pack contract in the rest of the component\n}"
    },
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "Vote": {
    "name": "Vote",
    "summary": "",
    "examples": {
      "react": "import { useVote } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const vote = useVote(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the vote contract in the rest of the component\n}"
    },
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "Multiwrap": {
    "name": "Multiwrap",
    "summary": "",
    "examples": {
      "react": "import { useMultiwrap } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const multiwrap = useMultiwrap(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the multiwrap contract in the rest of the component\n}",
      "python": "from thirdweb import ThirdwebSDK\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# Now we can create a new instance of the SDK\nsdk = ThirdwebSDK(network)\n\n# If you want to send transactions, you can instantiate the SDK with a private key instead:\n#   sdk = ThirdwebSDK.from_private_key(PRIVATE_KEY, network)\n\ncontract = sdk.get_multiwrap(\"{{contract_address}}\")",
      "go": "\nimport (\n\t\"github.com/thirdweb-dev/go-sdk/thirdweb\"\n)\n\nprivateKey = \"...\"\n\nsdk, err := thirdweb.NewThirdwebSDK(\"mumbai\", &thirdweb.SDKOptions{\n\tPrivateKey: privateKey,\n})\n\ncontract, err := sdk.GetMultiwrap(\"{{contract_address}}\")\n"
    },
    "methods": [],
    "properties": [],
    "reference": {
      "python": "https://docs.thirdweb.com/python/multiwrap",
      "go": "https://docs.thirdweb.com/go/multiwrap"
    }
  },
  "ContractDeployer": {
    "name": "ContractDeployer",
    "summary": "Handles deploying new contracts\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "deployEdition",
        "summary": "Deploys a new Edition contract\n\n",
        "remarks": "\n\nDeploys an Edition contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployEdition({\n  name: \"My Edition\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployEdition({\n  name: \"My Edition\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployedition",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployedition"
        }
      },
      {
        "name": "deployEditionDrop",
        "summary": "Deploys a new EditionDrop contract\n\n",
        "remarks": "\n\nDeploys an Edition Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployEditionDrop({\n  name: \"My Edition Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployEditionDrop({\n  name: \"My Edition Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployeditiondrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployeditiondrop"
        }
      },
      {
        "name": "deployMarketplace",
        "summary": "Deploys a new Marketplace contract\n\n",
        "remarks": "\n\nDeploys a Marketplace contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployMarketplace({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployMarketplace({\n  name: \"My Marketplace\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymarketplace",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymarketplace"
        }
      },
      {
        "name": "deployMultiwrap",
        "summary": "Deploys a new Multiwrap contract\n\n",
        "remarks": "\n\nDeploys a Multiwrap contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployMultiwrap({\n  name: \"My Multiwrap\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployMultiwrap({\n  name: \"My Multiwrap\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymultiwrap",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploymultiwrap"
        }
      },
      {
        "name": "deployNFTCollection",
        "summary": "Deploys an NFT Collection contract\n\n",
        "remarks": "\n\nDeploys an NFT Collection contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployNFTCollection({\n  name: \"My Collection\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployNFTCollection({\n  name: \"My Collection\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftcollection",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftcollection"
        }
      },
      {
        "name": "deployNFTDrop",
        "summary": "Deploys a new NFTDrop contract\n\n",
        "remarks": "\n\nDeploys an NFT Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployNFTDrop({\n  name: \"My Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployNFTDrop({\n  name: \"My Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftdrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploynftdrop"
        }
      },
      {
        "name": "deployPack",
        "summary": "Deploys a new Pack contract\n\n",
        "remarks": "\n\nDeploys a Pack contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployPack({\n  name: \"My Pack\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployPack({\n  name: \"My Pack\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploypack",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploypack"
        }
      },
      {
        "name": "deploySignatureDrop",
        "summary": "Deploys a new SignatureDrop contract\n\n",
        "remarks": "\n\nDeploys a SignatureDrop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deploySignatureDrop({\n  name: \"My Signature Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deploySignatureDrop({\n  name: \"My Signature Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysignaturedrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysignaturedrop"
        }
      },
      {
        "name": "deploySplit",
        "summary": "Deploys a new Split contract\n\n",
        "remarks": "\n\nDeploys a Split contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deploySplit({\n  name: \"My Split\",\n  primary_sale_recipient: \"your-address\",\n  recipients: [\n   {\n     address: \"your-address\",\n     sharesBps: 80 * 100, // 80%\n   },\n   {\n     address: \"another-address\",\n     sharesBps: 20 * 100, // 20%\n   },\n  ],\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deploySplit({\n  name: \"My Split\",\n  primary_sale_recipient: \"your-address\",\n  recipients: [\n   {\n     address: \"your-address\",\n     sharesBps: 80 * 100, // 80%\n   },\n   {\n     address: \"another-address\",\n     sharesBps: 20 * 100, // 20%\n   },\n  ],\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysplit",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploysplit"
        }
      },
      {
        "name": "deployToken",
        "summary": "Deploys a new Token contract\n\n",
        "remarks": "\n\nDeploys a Token contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployToken({\n  name: \"My Token\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployToken({\n  name: \"My Token\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytoken",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytoken"
        }
      },
      {
        "name": "deployTokenDrop",
        "summary": "Deploys a new Token Drop contract\n\n",
        "remarks": "\n\nDeploys a Token Drop contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployTokenDrop({\n  name: \"My Token Drop\",\n  primary_sale_recipient: \"your-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployTokenDrop({\n  name: \"My Token Drop\",\n  primary_sale_recipient: \"your-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytokendrop",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deploytokendrop"
        }
      },
      {
        "name": "deployVote",
        "summary": "Deploys a new Vote contract\n\n",
        "remarks": "\n\nDeploys an Vote contract and returns the address of the deployed contract\n\n",
        "examples": {
          "javascript": "const contractAddress = await sdk.deployer.deployVote({\n  name: \"My Vote\",\n  primary_sale_recipient: \"your-address\",\n  voting_token_address: \"your-token-contract-address\",\n});",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst contractAddress = await sdk.deployer.deployVote({\n  name: \"My Vote\",\n  primary_sale_recipient: \"your-address\",\n  voting_token_address: \"your-token-contract-address\",\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployvote",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractdeployer.deployvote"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractDeployer"
    }
  },
  "ContractEvents": {
    "name": "ContractEvents",
    "summary": "Listen to Contract events in real time\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "addEventListener",
        "summary": "Subscribe to contract events\n\n",
        "remarks": "\n\nYou can add a listener for any contract event to run a function when the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event, you could do the following:\n\n",
        "examples": {
          "javascript": "contract.events.addEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});",
          "python": "",
          "go": "",
          "react": "contract.events.addEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.addeventlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.addeventlistener"
        }
      },
      {
        "name": "addTransactionListener",
        "summary": "Subscribe to transactions in this contract.\n\n",
        "remarks": "\n\nWill emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n\n",
        "examples": {
          "javascript": "contract.events.addTransactionListener((event) => {\n  console.log(event);\n}",
          "python": "",
          "go": "",
          "react": "contract.events.addTransactionListener((event) => {\n  console.log(event);\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.addtransactionlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.addtransactionlistener"
        }
      },
      {
        "name": "getAllEvents",
        "summary": "Get All Events\n\n",
        "remarks": "\n\nGet a list of all the events emitted from this contract during the specified time period\n\n",
        "examples": {
          "javascript": "// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getAllEvents(filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);",
          "python": "",
          "go": "",
          "react": "// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getAllEvents(filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.getallevents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.getallevents"
        }
      },
      {
        "name": "getEvents",
        "summary": "Get Events\n\n",
        "remarks": "\n\nGet a list of the events of a specific type emitted from this contract during the specified time period\n\n",
        "examples": {
          "javascript": "// The name of the event to get logs for\nconst eventName = \"Transfer\";\n// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getEvents(eventName, filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);",
          "python": "",
          "go": "",
          "react": "// The name of the event to get logs for\nconst eventName = \"Transfer\";\n// Optionally pass in filters to limit the blocks from which events are retrieved\nconst filters = {\n  fromBlock: 0,\n  toBlock: 1000000,\n}\nconst events = await contract.events.getEvents(eventName, filters);\nconsole.log(events[0].eventName);\nconsole.log(events[0].data);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.getevents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.getevents"
        }
      },
      {
        "name": "listenToAllEvents",
        "summary": "Listen to all events emitted from this contract\n\n",
        "remarks": null,
        "examples": {
          "javascript": "contract.events.listenToAllEvents((event) => {\n  console.log(event.eventName) // the name of the emitted event\n  console.log(event.data) // event payload\n}",
          "python": "",
          "go": "",
          "react": "contract.events.listenToAllEvents((event) => {\n  console.log(event.eventName) // the name of the emitted event\n  console.log(event.data) // event payload\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.listentoallevents",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.listentoallevents"
        }
      },
      {
        "name": "removeAllListeners",
        "summary": "Remove all listeners on this contract\n\n",
        "remarks": "\n\nRemove all listeners from a contract\n\n",
        "examples": {
          "javascript": "contract.events.removeAllListeners();",
          "python": "",
          "go": "",
          "react": "contract.events.removeAllListeners();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.removealllisteners",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.removealllisteners"
        }
      },
      {
        "name": "removeEventListener",
        "summary": "Remove an event listener from this contract\n\n",
        "remarks": "\n\nRemove a listener that was added with addEventListener\n\n",
        "examples": {
          "javascript": "contract.events.removeEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});",
          "python": "",
          "go": "",
          "react": "contract.events.removeEventListener(\"TokensMinted\", (event) => {\n  console.log(event);\n});"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.removeeventlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.removeeventlistener"
        }
      },
      {
        "name": "removeTransactionListener",
        "summary": "Remove a transaction listener\n\n",
        "remarks": "\n\nRemove a listener that was added with addTransactionListener\n\n",
        "examples": {
          "javascript": "contract.events.removeTransactionListener((event) => {\n console.log(event);\n}",
          "python": "",
          "go": "",
          "react": "contract.events.removeTransactionListener((event) => {\n console.log(event);\n}"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractevents.removetransactionlistener",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractevents.removetransactionlistener"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractEvents"
    }
  },
  "DelayedReveal": {
    "name": "DelayedReveal",
    "summary": "Handles delayed reveal logic\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "createDelayedRevealBatch",
        "summary": "Create a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until your reveal them!\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);",
          "python": "",
          "go": "",
          "react": "// the real NFTs, these will be encrypted until your reveal them!\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.createdelayedrevealbatch",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.createdelayedrevealbatch"
        }
      },
      {
        "name": "getBatchesToReveal",
        "summary": "Gets the list of unrevealed NFT batches.\n\n",
        "remarks": "\n\nGets the list of unrevealed NFT batches.\n\n",
        "examples": {
          "javascript": "const batches = await contract.revealer.getBatchesToReveal();",
          "python": "",
          "go": "",
          "react": "const batches = await contract.revealer.getBatchesToReveal();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.getbatchestoreveal",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.getbatchestoreveal"
        }
      },
      {
        "name": "reveal",
        "summary": "Reveal a batch of hidden NFTs\n\n",
        "remarks": "\n\nReveal the NFTs of a batch using the password.\n\n",
        "examples": {
          "javascript": "// the batch to reveal\nconst batchId = 0;\n// reveal the batch\nawait contract.revealer.reveal(batchId, \"my secret password\");",
          "python": "",
          "go": "",
          "react": "// the batch to reveal\nconst batchId = 0;\n// reveal the batch\nawait contract.revealer.reveal(batchId, \"my secret password\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.reveal",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.delayedreveal.reveal"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.DelayedReveal"
    }
  },
  "GasCostEstimator": {
    "name": "GasCostEstimator",
    "summary": "Estimates the gas cost of Contract calls\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "currentGasPriceInGwei",
        "summary": "Returns the current gas price in gwei\n\n",
        "remarks": "\n\nGet the current gas price in gwei\n\n",
        "examples": {
          "javascript": "const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();",
          "python": "",
          "go": "",
          "react": "const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.currentgaspriceingwei",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.currentgaspriceingwei"
        }
      },
      {
        "name": "gasCostOf",
        "summary": "Estimates the cost of gas in native token of the current chain Pass in the same parameters as the contract's function.\n\n",
        "remarks": "\n\nEstimate the cost of gas in native token of the current chain\n\n",
        "examples": {
          "javascript": "const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);",
          "python": "",
          "go": "",
          "react": "const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gascostof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gascostof"
        }
      },
      {
        "name": "gasLimitOf",
        "summary": "Estimates the gas limit of a transaction Pass in the same parameters as the contract's function.\n\n",
        "remarks": "\n\nEstimates the gas limit of a transaction\n\n",
        "examples": {
          "javascript": "const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);",
          "python": "",
          "go": "",
          "react": "const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n  \"0x...\", // receiver\n  1, // quantity\n  \"0x...\", // currency\n  1, // price per token\n  [], // proofs\n  1, // proof max quantity per transaction\n]);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gaslimitof",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.gascostestimator.gaslimitof"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.GasCostEstimator"
    }
  },
  "RemoteStorage": {
    "name": "RemoteStorage",
    "summary": "",
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "ContractInterceptor": {
    "name": "ContractInterceptor",
    "summary": "Allows overriding transaction behavior for this contract\n\n\n",
    "examples": {},
    "methods": [
      {
        "name": "overrideNextTransaction",
        "summary": "The next transaction executed will add/replace any overrides passed via the passed in hook.\n\n",
        "remarks": "\n\nOverridden values will be applied to the next transaction executed.\n\n",
        "examples": {
          "javascript": "contract.interceptor.overrideNextTransaction(() => ({\n  gasLimit: 3000000,\n}));",
          "python": "",
          "go": "",
          "react": "contract.interceptor.overrideNextTransaction(() => ({\n  gasLimit: 3000000,\n}));"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractinterceptor.overridenexttransaction",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractinterceptor.overridenexttransaction"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractInterceptor"
    }
  },
  "ContractMetadata": {
    "name": "ContractMetadata",
    "summary": "Handles metadata for a Contract\n\n",
    "examples": {
      "javascript": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst metadata = await contract.metadata.get();\nawait contract.metadata.set({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
    },
    "methods": [
      {
        "name": "get",
        "summary": "Get the metadata of a contract\n\n",
        "remarks": "\n\nGet the metadata of a contract\n\n",
        "examples": {
          "javascript": "const metadata = await contract.metadata.get();",
          "python": "",
          "go": "",
          "react": "const metadata = await contract.metadata.get();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.get"
        }
      },
      {
        "name": "set",
        "summary": "Set the metadata of a contract\n\n",
        "remarks": "\n\nOVERWRITE the metadata of a contract\n\n",
        "examples": {
          "javascript": "await contract.metadata.set({\n name: \"My Contract\",\n description: \"My contract description\"\n})",
          "python": "",
          "go": "",
          "react": "await contract.metadata.set({\n name: \"My Contract\",\n description: \"My contract description\"\n})"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.set",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.set"
        }
      },
      {
        "name": "update",
        "summary": "Update the metadata of a contract\n\n",
        "remarks": "\n\nUpdate the metadata of a contract\n\n",
        "examples": {
          "javascript": "await contract.metadata.update({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})",
          "python": "",
          "go": "",
          "react": "await contract.metadata.update({\n  name: \"My Contract\",\n  description: \"My contract description\"\n})"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.update",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractmetadata.update"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractMetadata"
    }
  },
  "ContractRoles": {
    "name": "ContractRoles",
    "summary": "Handle contract permissions\n\n",
    "examples": {
      "javascript": "const contract = await sdk.getContract(\"{{contract_address}}\");\nconst rolesAndMembers = await contract.roles.getAll();\nawait contract.roles.grantRole(\"admin\", \"0x...\");"
    },
    "methods": [
      {
        "name": "get",
        "summary": "Call this to get a list of addresses that are members of a specific role.\n\n",
        "remarks": "\n\nSee {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n\n",
        "examples": {
          "javascript": "const minterAddresses = await contract.roles.get(\"minter\");",
          "python": "",
          "go": "",
          "react": "const minterAddresses = await contract.roles.get(\"minter\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.get",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.get"
        }
      },
      {
        "name": "getAll",
        "summary": "Call this to get get a list of addresses for all supported roles on the contract.\n\n",
        "remarks": "\n\nSee {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n\n",
        "examples": {
          "javascript": "const rolesAndMembers = await contract.roles.getAll();",
          "python": "",
          "go": "",
          "react": "const rolesAndMembers = await contract.roles.getAll();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.getall",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.getall"
        }
      },
      {
        "name": "grant",
        "summary": "Call this to grant a role to a specific address.\n\n",
        "remarks": "\n\nMake sure you are sure you want to grant the role to the address.\n\n",
        "examples": {
          "javascript": "await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");",
          "python": "",
          "go": "",
          "react": "await contract.roles.grant(\"minter\", \"0x1234567890123456789012345678901234567890\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.grant",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.grant"
        }
      },
      {
        "name": "revoke",
        "summary": "Call this to revoke a role from a specific address.\n\n",
        "remarks": "\n\n-- Caution --\n\nThis will let you remove yourself from the role, too. If you remove yourself from the admin role, you will no longer be able to administer the contract. There is no way to recover from this.\n\n",
        "examples": {
          "javascript": "await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");",
          "python": "",
          "go": "",
          "react": "await contract.roles.revoke(\"minter\", \"0x1234567890123456789012345678901234567890\");"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.revoke",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.revoke"
        }
      },
      {
        "name": "setAll",
        "summary": "Call this to OVERWRITE the list of addresses that are members of specific roles.\n\nEvery role in the list will be overwritten with the new list of addresses provided with them. If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const minterAddresses = await contract.roles.get(\"minter\");\nawait contract.roles.setAll({\n minter: []\n});\nconsole.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []",
          "python": "",
          "go": "",
          "react": "const minterAddresses = await contract.roles.get(\"minter\");\nawait contract.roles.setAll({\n minter: []\n});\nconsole.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.contractroles.setall",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.contractroles.setall"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.ContractRoles"
    }
  },
  "SignatureDrop": {
    "name": "SignatureDrop",
    "summary": "",
    "examples": {
      "react": "import { useSignatureDrop } from '@thirdweb-dev/react'\n\nexport default function Component() {\n  const signatureDrop = useSignatureDrop(\"<YOUR-CONTRACT-ADDRESS>\")\n\n  // Now you can use the Signature drop contract in the rest of the component\n}"
    },
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "SmartContract": {
    "name": "SmartContract",
    "summary": "",
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": {}
  },
  "WalletAuthenticator": {
    "name": "WalletAuthenticator",
    "summary": "Wallet Authenticator\n\n",
    "examples": {
      "javascript": "// We specify the domain of the application to authenticate to\nconst domain = \"example.com\"\n\n// On the client side, we can generate a payload for the connected wallet to login\nconst loginPayload = await sdk.auth.login(domain);\n\n// Then on the server side, we can securely verify the connected client-side address\nconst address = sdk.auth.verify(domain, loginPayload);\n\n// And we can also generate an authentication token to send to the client\nconst token = sdk.auth.generate(domain, loginPayload);\n\n// Finally, the token can be send from the client to the server to make authenticated requests\n// And the server can use the following function to authenticate a token and verify the associated address\nconst address = sdk.auth.authenticate(domain, token);",
      "python": "# We specify the domain of the application to authenticate to\ndomain = \"example.com\"\n\n# We can then generate a payload for the connected wallet to login\n# This can also be done on the client side with the thirdweb TypeScript SDK\npayload = sdk.auth.login(domain)\n\n# Then, on the server, we can securely verify the connected address that signed the payload\naddress = sdk.auth.verify(domain, payload)\n\n# And we can also generate an authentication token to send back to the original payload sender\ntoken = sdk.auth.generate_auth_token(domain, payload)\n\n# Finally, the token can be use dby the original payload sender to authenticate to the backend\n# And the server can use the following function to authenticate the token and verify the address\naddress = sdk.auth.authenticate(domain, token)",
      "go": "\n// First we specify the domain of the application to authenticate to\ndomain := \"example.com\"\n\n// We can then generate a payload for the connected wallet to login\n// This can also be done on the client side with the thirdweb TypeScript SDK\npayload, err := sdk.Auth.Login(domain, nil)\n\n// Then, on the server, we can securely verify the connected address that signed the payload\naddress, err := sdk.Auth.Verify(domain, payload, nil)\n\n// And we can also generate an authentication token to send back to the original payload sender\ntoken, err := sdk.Auth.GenerateAuthToken(domain, payload, nil)\n\n// Finally, the token can be use dby the original payload sender to authenticate to the backend\n// And the server can use the following function to authenticate the token and verify the address\naddress, err := sdk.Auth.Authenticate(domain, token)\n"
    },
    "methods": [
      {
        "name": "authenticate",
        "summary": "Authenticate With Token\n\n",
        "remarks": "\n\nServer-side function that authenticates the provided JWT token. This function verifies that the provided authentication token is valid and returns the address of the authenticated wallet.\n\n",
        "examples": {
          "javascript": "const domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);\n\n// Authenticate the token and get the address of authenticating users wallet\nconst address = sdk.auth.authenticate(domain, token);",
          "python": "domain = \"example.com\"\npayload = sdk.auth.login(domain)\ntoken = sdk.auth.generate_auth_token(domain, payload)\n\n# Authenticate the token and get the address of the authenticating wallet\naddress = sdk.auth.authenticate(domain, token)",
          "go": "domain := \"example.com\"\npayload, err := sdk.Auth.Login(domain)\ntoken, err := sdk.Auth.GenerateAuthToken(domain, payload)\n\n// Authenticate the token and get the address of the authenticating wallet\naddress, err := sdk.Auth.Authenticate(domain, token)\n",
          "react": "const sdk = useSDK();\n\nconst domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);\n\n// Authenticate the token and get the address of authenticating users wallet\nconst address = sdk.auth.authenticate(domain, token);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.authenticate",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#authenticate",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-authenticate",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.authenticate"
        }
      },
      {
        "name": "generateAuthToken",
        "summary": "Generate Authentication Token\n\n",
        "remarks": "\n\nServer-side function that generates a JWT token from the provided login request that the client-side wallet can use to authenticate to the server-side application.\n\n",
        "examples": {
          "javascript": "const domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Generate a JWT token that can be sent to the client-side wallet and used for authentication\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);",
          "python": "domain = \"example.com\"\npayload = sdk.auth.login(domain)\n\n# Generate an authentication token for the logged in wallet\ntoken = sdk.auth.generate_auth_token(domain, payload)",
          "go": "domain := \"example.com\"\npayload, err := sdk.Auth.Login(domain, nil)\n\n// Generate an authentication token for the logged in wallet\ntoken, err := sdk.Auth.GenerateAuthToken(domain, payload, nil)\n",
          "react": "const sdk = useSDK();\n\nconst domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Generate a JWT token that can be sent to the client-side wallet and used for authentication\nconst token = await sdk.auth.generateAuthToken(domain, loginPayload);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.generateauthtoken",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#generate_auth_token",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-generateauthtoken",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.generateauthtoken"
        }
      },
      {
        "name": "login",
        "summary": "Login With Connected Wallet\n\n",
        "remarks": "\n\nClient-side function that allows the connected wallet to login to a server-side application. Generates a login payload that can be sent to the server-side for verification or authentication.\n\n",
        "examples": {
          "javascript": "// Add the domain of the application users will login to, this will be used throughout the login process\nconst domain = \"example.com\";\n// Generate a signed login payload for the connected wallet to authenticate with\nconst loginPayload = await sdk.auth.login(domain);",
          "python": "# Add the domain of the application that you want to log in to\ndomain = \"example.com\"\n\n# Generate a signed login payload for the connected wallet to authenticate with\npayload = sdk.auth.login(domain)",
          "go": "// Add the domain of the application that you want to log in to\ndomain := \"example.com\"\n\n// Generate a signed login payload for the connected wallet to authenticate with\npayload, err := sdk.Auth.Login(domain, nil)\n",
          "react": "const sdk = useSDK();\n\n// Add the domain of the application users will login to, this will be used throughout the login process\nconst domain = \"example.com\";\n// Generate a signed login payload for the connected wallet to authenticate with\nconst loginPayload = await sdk.auth.login(domain);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.login",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#login",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-login",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.login"
        }
      },
      {
        "name": "verify",
        "summary": "Verify Logged In Address\n\n",
        "remarks": "\n\nServer-side function to securely verify the address of the logged in client-side wallet by validating the provided client-side login request.\n\n",
        "examples": {
          "javascript": "const domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Verify the login request\nconst address = sdk.auth.verify(domain, loginPayload);",
          "python": "domain = \"example.com\"\npayload = sdk.auth.login(domain)\n\n# Verify the login request\naddress = sdk.auth.verify(domain, payload)",
          "go": "domain := \"example.com\"\npayload, err := sdk.Auth.Login(domain, nil)\n\n// Verify the login request\naddress, err := sdk.Auth.Verify(domain, payload, nil)\n",
          "react": "const sdk = useSDK();\n\nconst domain = \"example.com\";\nconst loginPayload = await sdk.auth.login(domain);\n\n// Verify the login request\nconst address = sdk.auth.verify(domain, loginPayload);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.verify",
          "python": "https://docs.thirdweb.com/python/wallet-authenticator#verify",
          "go": "https://docs.thirdweb.com/go/wallet_authenticator#func-walletauthenticator-verify",
          "react": "https://docs.thirdweb.com/typescript/sdk.walletauthenticator.verify"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.WalletAuthenticator",
      "python": "https://docs.thirdweb.com/python/wallet-authenticator",
      "go": "https://docs.thirdweb.com/go/wallet_authenticator"
    }
  },
  "UserWallet": {
    "name": "UserWallet",
    "summary": "Connect and Interact with a user wallet\n\n",
    "examples": {
      "javascript": "const balance = await sdk.wallet.balance();"
    },
    "methods": [
      {
        "name": "balance",
        "summary": "Fetch the native or ERC20 token balance of this wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// native currency balance\nconst balance = await sdk.wallet.balance();\n// ERC20 token balance\nconst erc20balance = await sdk.wallet.balance(tokenContractAddress);\n",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// native currency balance\nconst balance = await sdk.wallet.balance();\n// ERC20 token balance\nconst erc20balance = await sdk.wallet.balance(tokenContractAddress);\n"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.balance",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.balance"
        }
      },
      {
        "name": "getAddress",
        "summary": "Get the currently connected address\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const address = await sdk.wallet.getAddress();",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst address = await sdk.wallet.getAddress();"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.getaddress",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.getaddress"
        }
      },
      {
        "name": "recoverAddress",
        "summary": "Recover the signing address from a signed message\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const message = \"Sign this message...\";\nconst signature = await sdk.wallet.sign(message);\n\n// Now we can recover the signing address\nconst address = sdk.wallet.recoverAddress(message, signature);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\nconst message = \"Sign this message...\";\nconst signature = await sdk.wallet.sign(message);\n\n// Now we can recover the signing address\nconst address = sdk.wallet.recoverAddress(message, signature);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.recoveraddress",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.recoveraddress"
        }
      },
      {
        "name": "sign",
        "summary": "Sign any message with the connected wallet private key\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// This is the message to be signed\nconst message = \"Sign this message...\";\n\n// Now we can sign the message with the connected wallet\nconst signature = await sdk.wallet.sign(message);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n// This is the message to be signed\nconst message = \"Sign this message...\";\n\n// Now we can sign the message with the connected wallet\nconst signature = await sdk.wallet.sign(message);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.sign",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.sign"
        }
      },
      {
        "name": "transfer",
        "summary": "Transfer native or ERC20 tokens from this wallet to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": " // transfer 0.8 ETH\nawait sdk.wallet.transfer(\"0x...\", 0.8);\n // transfer 0.8 tokens of `tokenContractAddress`\nawait sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);",
          "python": "",
          "go": "",
          "react": "const sdk = useSDK();\n\n // transfer 0.8 ETH\nawait sdk.wallet.transfer(\"0x...\", 0.8);\n // transfer 0.8 tokens of `tokenContractAddress`\nawait sdk.wallet.transfer(\"0x...\", 0.8, tokenContractAddress);"
        },
        "reference": {
          "javascript": "https://docs.thirdweb.com/typescript/sdk.userwallet.transfer",
          "python": "",
          "go": "",
          "react": "https://docs.thirdweb.com/typescript/sdk.userwallet.transfer"
        }
      }
    ],
    "properties": [],
    "reference": {
      "typescript": "https://docs.thirdweb.com/typescript/sdk.UserWallet"
    }
  }
}